tomcat-logs-

세션은 생성 시에 고유 id가 존재한다.

세션 = 서버 / 쿠키 = 클라


JSession = 유통기한이 session의 라이프사이클에 맞춰져 있음. 단순 세션으로만 되어 있으면 브라우저가 꺼질 때까지
키와 밸류로 구성되어 있고 톰캣이 만들어낸 것, 16진수, 이 값이 같으면 같은 사용자로서 인정함. 
즉 세션의 동일 여부를 판단

req.getsession을 했을 경우 세션이 있으면 있는거 가져다주고 없으면 새로 만들어서 가져다 줌.
세션은 사실 쿠키로 만든 것.
세션을 통해 로그인을 구현하는 거지, 세션이 곧 로그인은 아님.

세션의 아이디를 통해 톰캣은 이 사용자가 그 사용자가 맞는지 계속해서 확인함. 
(이게 1차, 2차로는 구현부에서 아이디 어트리뷰트를 가져와서 판단함)

톰캣은 웹서버의 기능도 가능
(서블릿 컨테이너)
어떤 HTTP로 했는가, 어떤 서버 Status로 하는지.

날짜 옆에 사용하는 메서드, http 버전도 포함함.

400 = 클라규칙
500 = 서버오류

200 = 성공
300 = 일시적 이동
302 = 접근을 허용하지는 않지만 일시적으로 사용이 불가함. 프로그래밍적 영역. 즉 서버 응답

Log 는 소프트웨어의 이벤트를 기록하고, 동작상태를 파악하거나 동작 파악을 통해 문제를 찾아내고 해결하기 위해 디자인되었음. 
응용 프로그램의 실행에 대한 흐름과 에러 확인 가능
프레임워크를 이용하여 간단하고 쉬운 사용환경 조성 가능
모듈별로 유연하게 메세지 출력 가능



DEBUG(많이 사용되지는 않음) / INFO(최소단계, 보통 이걸 최소단계 로깅으로 봄, 테스트) / WARNING(실행부, 경고) / ERROR(예외, 흐름제어) / FATAL(치명적 오류)
사용법 = log.info("msg");