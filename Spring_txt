tomcat-logs-

세션은 생성 시에 고유 id가 존재한다.

세션 = 서버 / 쿠키 = 클라


JSession = 유통기한이 session의 라이프사이클에 맞춰져 있음. 단순 세션으로만 되어 있으면 브라우저가 꺼질 때까지
키와 밸류로 구성되어 있고 톰캣이 만들어낸 것, 16진수, 이 값이 같으면 같은 사용자로서 인정함. 
즉 세션의 동일 여부를 판단

req.getsession을 했을 경우 세션이 있으면 있는거 가져다주고 없으면 새로 만들어서 가져다 줌.
세션은 사실 쿠키로 만든 것.
세션을 통해 로그인을 구현하는 거지, 세션이 곧 로그인은 아님.

세션의 아이디를 통해 톰캣은 이 사용자가 그 사용자가 맞는지 계속해서 확인함. 
(이게 1차, 2차로는 구현부에서 아이디 어트리뷰트를 가져와서 판단함)

톰캣은 웹서버의 기능도 가능
(서블릿 컨테이너)
어떤 HTTP로 했는가, 어떤 서버 Status로 하는지.

날짜 옆에 사용하는 메서드, http 버전도 포함함.

400 = 클라규칙
500 = 서버오류

200 = 성공
300 = 일시적 이동
302 = 접근을 허용하지는 않지만 일시적으로 사용이 불가함. 프로그래밍적 영역. 즉 서버 응답

Log 는 소프트웨어의 이벤트를 기록하고, 동작상태를 파악하거나 동작 파악을 통해 문제를 찾아내고 해결하기 위해 디자인되었음. 
응용 프로그램의 실행에 대한 흐름과 에러 확인 가능
프레임워크를 이용하여 간단하고 쉬운 사용환경 조성 가능
모듈별로 유연하게 메세지 출력 가능



DEBUG(많이 사용되지는 않음) / INFO(최소단계, 보통 이걸 최소단계 로깅으로 봄, 테스트) / WARNING(실행부, 경고) / ERROR(예외, 흐름제어) / FATAL(치명적 오류) / TRACE(디버그보다 상세한 경로, 모든 흐름 출력)
사용법 = log.info("msg");

useragent = 사용자 정보를 기록하는 문자열 정보(js) / navigator 

DNS = ip와 도메인 주소를 맵핑해주는 구조
A = ip 맵핑 / CNAME = 도메인 맵핑

메인 도메인과 서브 도메인 


프론트 처리는 엔진엑스가 도메인에 따라서 프록시 처리를 해줌 이게 프론트 처리 

Spring boot initializr 
IOC - DI / DL 
Logger(Log4j2)
TestCode(Junit5)

Spring Container(라이프싸이클이 복잡한 편 )
application.properties 이외에도 (XML, Annotaion) 기반의 설정도 가능
DI 
AOP

콜백이라고 하는 것은 주로 콜백함수를 부를 때 사용되는 용어이며 콜백함수를 등록하면 특정 이벤트가 발생했을 때해당 메소드가 호출된다.
즉 조건에 따라 실행될 수도 실행되지 않을 수도 있는 개념이라고 보면 된다. 

스프링 빈즈도 위와 같은 원리로 초기화 작업과 종료 작업이 나눠서 진행된다. 

@Bean 어노테이션은 메서드 앞에서 작동함

@Component, @Service, @Controller 는 클래스 앞에서 선언해줘야함

생성자 주입 : 객체의 생성과 의존관계 주입이 동시에 일어남
Setter, Field 주입 : 객체의 생성  - > 의존관계 주입

Mapper 

Spring 컨테이너는 인스턴스 생성 방식을 두가지 종류 중 하나를 직접 채택함. 
1 만일 해당 클래스가 어떤 인터페이스를 구현하고 있다면 , 인터페이스 구현을 통해 객체를 생성함.(직접 만든 것이 아니더라도..) 
2 상속을 통해서 객체 생성

생성자 주입에서는 객체 생성, 의존관계 주입이 하나의 단계에서 일어나는 것.

IOC 컨테이너 생성 -> Bean 생성 -> 의존관계 주입 -> 초기화 콜백 메소드 호출 -> 사용 -> 소멸 전 콜백 메소드 호출 -> 스프링 종료

@PostConstruct @PreDestroy
생성 이후 / 소멸 이전 

초기화할때 할일, 소멸할때 할 일 을 지정해 줌.

@AutoWired
@Service
@Controller
@Mapper
-- 스프링 코어 어노테이션 

@Resource 
@Inject 


K - M - G - T 
milli - micro - nano



SpEl = Spring El 문법 

#{} ${} 은 
#을 썼을 때에는 자체 EXECPT 시행.

SQL INJECTION

Aspect = Advice + PointCut 
Target = Aspect 가 적용되는 곳
Advice = 할 일
JoinPoint = 할 곳 Advice가 적용될 위치
PointCut = 조건식
Weaving = Aspect의 흐름 양상

advice 를 작용하려면 무조건 proxy 객체가 필요하다. 

Spring aop : 기본적인 AOP 적용법.
단점 : PointCut 활용 및 적용이 매우 어려운 편.
메서드 이름으로만 기준을 잡기 때문.

AspectJ Aop : expression 사용으로 pointCut 적용, 직관적 문법 + 적용 범위 넓음.

advisor = ????????????????????????????? 실제로 할 일.

Execution 명시자

접근 제한자는 생략 가능
리턴 타입 명시
클래스이름 및 이름 명시
파라미터 명시

ex = Execution(public Integer com.edu.aop."."(*));



@Component 
@SpringBoot


@Test 코드는 무조건 퍼블릭으로 할 것.